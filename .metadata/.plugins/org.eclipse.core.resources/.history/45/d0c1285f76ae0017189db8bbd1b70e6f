import java.time.LocalTime;

public class Split {

	// entered fields
	double splitNumber;
	double distance;
	LocalTime nominalTime;
	
	double elevation;
	double fadeFactor;
	double manualWeighting;
	
	// calculated fields
	private double gradient;
	private double paceImpact;
	private double timeDelta;
	private double nominalTimeDec;
	private double timeWithGradientDec;
	double weightedTimeDec;
	
	// TODO
	
	


	LocalTime finalTime;
	double finalPace;
	LocalTime finalElapsedTime;
	
	public void calculatePacePerSplit(){
		gradient = elevation / 10;
		paceImpact = calcPaceImpact(elevation);  // some of this can be combined
		timeDelta = paceImpact * gradient; // seconds
		nominalTimeDec = utils.TimeToDouble(nominalTime);  // decimal time eg 8:30 is 8.5		
		timeWithGradientDec = 60 / ((60 / nominalTimeDec) - timeDelta);  // convert to KM/H; add the gradient impact and convert back to min/km
		weightedTimeDec = timeWithGradientDec * manualWeighting * fadeFactor / 100;
				
		/*
		System.out. println("splitNumber: " + splitNumber);
		System.out.println("nominalTime: " + nominalTime);
		System.out.println("nominalTimeDec: " + nominalTimeDec);
		System.out.println("gradient: " + gradient);
		System.out.println("paceImact: " + paceImpact);
		System.out.println("timeDelta: " + timeDelta);
		System.out.println("timeWithGradientDec: " + timeWithGradientDec);
		System.out.println("timeWithGradient: " + utils.DoubleToTime(timeWithGradientDec));
		System.out.println("fadeFactor: " + fadeFactor);
		System.out.println("weightedTimeDec: " + weightedTimeDec);
		System.out.println("weightedTime: " + utils.DoubleToTime(weightedTimeDec));
		*/

		
		// TODO: put results into an array somewhere
	}
	
	// TODO: make static variables
	private double calcPaceImpact(double elevation) {
		if (elevation > 25) return 0.4;
		if (elevation > 0) return 0.5;
		if (elevation < -20) return 0.15;
		if (elevation < 0) return 0.3;
		return 0;
		
	}
	
	
}
